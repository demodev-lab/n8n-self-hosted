name: 'n8n-redis'

networks:
  n8n-network:
    driver: bridge

services:
  postgres:
    image: 'postgres:16-alpine'
    environment:
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_DB: '${POSTGRES_DB}'
    volumes:
      - 'postgres_data:/var/lib/postgresql/data'
    networks:
      - n8n-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis:
    image: 'redis:7-alpine'
    volumes:
      - 'redis_data:/data'
    networks:
      - n8n-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  n8n:
    image: 'docker.n8n.io/n8nio/n8n:latest'
    ports:
      - '127.0.0.1:5678:5678'
    environment:
      # Core
      N8N_PORT: '5678'
      N8N_LISTEN_ADDRESS: '0.0.0.0'
      GENERIC_TIMEZONE: '${GENERIC_TIMEZONE:-Asia/Seoul}'
      N8N_ENCRYPTION_KEY: '${N8N_ENCRYPTION_KEY}'
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: 'true'
      NODE_ENV: 'production'
      # DB(PostgreSQL)
      DB_TYPE: 'postgresdb'
      DB_POSTGRESDB_HOST: 'postgres'
      DB_POSTGRESDB_PORT: '5432'
      DB_POSTGRESDB_DATABASE: '${POSTGRES_DB}'
      DB_POSTGRESDB_USER: '${POSTGRES_USER}'
      DB_POSTGRESDB_PASSWORD: '${POSTGRES_PASSWORD}'
      # Redis Queue
      QUEUE_BULL_REDIS_HOST: 'redis'
      QUEUE_BULL_REDIS_PORT: '6379'
      EXECUTIONS_MODE: 'queue'
      # Health Check
      QUEUE_HEALTH_CHECK_ACTIVE: 'true'
    volumes:
      - 'n8n_data:/home/node/.n8n'
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "fetch('http://127.0.0.1:5678/healthz/readiness').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 50s
    networks:
      - n8n-network
    restart: unless-stopped

volumes:
  n8n_data:
  postgres_data:
  redis_data: